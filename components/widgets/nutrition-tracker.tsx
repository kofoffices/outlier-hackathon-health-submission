"use client"

import type React from "react"
import { useState, useEffect } from "react" // Added useEffect
import { Button } from "@/components/ui/button"
import { Apple, Plus, Blocks, Pyramid as PyramidIcon } from "lucide-react" // Added Blocks, PyramidIcon
import { useHealth, Meal } from "@/components/health-provider" // Import Meal type from provider
import {
  Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select" // For category selection
import { useToast } from "@/components/ui/use-toast"
import { RetroWindow } from "@/components/ui/retro-window"

// --- GAMIFICATION COMPONENTS ---
import FoodBytesCollector, { FOOD_BYTE_CATEGORIES } from "@/components/gamification/FoodBytesCollector"; // Adjust path
import PixelFoodPyramid from "@/components/gamification/PixelFoodPyramid"; // Adjust path

// Extend Meal type if not already in provider
interface MealWithCategory extends Meal {
  category?: string; // e.g., "fruit", "vegetable", "protein_source", "grain", "dairy", "fats_sweets", "mixed"
}


export function NutritionTracker() {
  const { meals, addMeal, dailyGoals } = useHealth() // Assuming dailyGoals.calories exists
  const { toast } = useToast()
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [newMeal, setNewMeal] = useState<Omit<MealWithCategory, 'id'>>({ // id will be generated by addMeal
    name: "",
    calories: 0,
    time: "",
    protein: 0,
    carbs: 0,
    fat: 0,
    category: FOOD_BYTE_CATEGORIES[0]?.id || "", // Default to first category
  })

  const totalCalories = meals.reduce((sum, meal) => sum + meal.calories, 0)
  const totalProtein = meals.reduce((sum, meal) => sum + (meal.protein || 0), 0)
  const totalCarbs = meals.reduce((sum, meal) => sum + (meal.carbs || 0), 0)
  const totalFat = meals.reduce((sum, meal) => sum + (meal.fat || 0), 0)

  const caloriesGoal = dailyGoals?.calories || 2000; // Use from context or default
  const caloriesPercentage = caloriesGoal > 0 ? (totalCalories / caloriesGoal) * 100 : 0;

  // --- Gamification Data Calculation ---
  const [collectedFoodCategories, setCollectedFoodCategories] = useState<Set<string>>(new Set());
  const [foodPyramidPortions, setFoodPyramidPortions] = useState({
    grains: 0, vegetables: 0, fruits: 0, protein: 0, dairy: 0, fats_sweets: 0,
  });

  useEffect(() => {
    const categories = new Set<string>();
    const portions = { grains: 0, vegetables: 0, fruits: 0, protein: 0, dairy: 0, fats_sweets: 0 };
    
    // For simplicity, let's base the pyramid on today's meals.
    // A more advanced version would use weekly data.
    meals.forEach((meal: MealWithCategory) => {
      if (meal.category) {
        categories.add(meal.category);
        switch(meal.category) {
            case 'grain': portions.grains++; break;
            case 'vegetable': portions.vegetables++; break;
            case 'fruit': portions.fruits++; break;
            case 'protein_source': portions.protein++; break;
            case 'dairy': portions.dairy++; break;
            // Add more cases if you have more categories like 'fats_sweets'
            default: break; // Or assign to a 'mixed' or 'other' category for the pyramid
        }
      }
    });
    setCollectedFoodCategories(categories);
    setFoodPyramidPortions(portions);
  }, [meals]);


  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setNewMeal({
      ...newMeal,
      [name]: name === "name" || name === "time" ? value : Number(value),
    })
  }
  const handleCategoryChange = (value: string) => {
    setNewMeal({...newMeal, category: value });
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (!newMeal.name || !newMeal.time || newMeal.calories <= 0 || !newMeal.category) {
      toast({
        title: "Invalid meal data",
        description: "Please fill in all required fields, including category.",
        variant: "destructive",
      })
      return
    }

    addMeal(newMeal as MealWithCategory); // Cast if addMeal expects Meal (without category)
    setIsDialogOpen(false)
    setNewMeal({
      name: "", calories: 0, time: "", protein: 0, carbs: 0, fat: 0, category: FOOD_BYTE_CATEGORIES[0]?.id || "",
    })
    toast({
      title: "Meal added",
      description: `${newMeal.name} has been added.`,
    })
  }

  return (
    <>
      <RetroWindow
        title="Nutrition Tracker - Click on Log Meal to add & track : visualize your food intake"
        icon={<Apple className="h-4 w-4 text-green-500" />}
        variant="green"
        className="transition-all duration-200"
      >
        {/* ... (Existing calories, progress bar, macros - NO CHANGE) ... */}
        <div className="flex items-center justify-between mb-4">
          <div><p className="text-sm text-gray-700 font-bold">Calories Consumed</p><p className="text-2xl font-bold">{totalCalories}<span className="text-sm font-normal text-gray-500"> / {caloriesGoal}</span></p></div>
          <Button size="sm" className="text-black bg-green-400 hover:bg-green-500 active:bg-green-600 hover:scale-[1.03] transition-all duration-200 border-2 border-gray-800 shadow-[2px_2px_0px_0px_rgba(0,0,0,0.8)] active:shadow-none active:translate-y-[2px] active:translate-x-[2px]" onClick={() => setIsDialogOpen(true)}><Plus className="text-black h-4 w-4 mr-1" />Log Meal</Button>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2.5 mb-4 border-2 border-gray-800"><div className="bg-green-500 h-2 rounded-full transition-all duration-500" style={{ width: `${Math.min(caloriesPercentage, 100)}%` }}/></div>
        <div className="grid grid-cols-3 gap-2 mb-4">
          <div className="bg-green-100 p-2 rounded-md border-2 border-gray-800 shadow-[2px_2px_0px_0px_rgba(0,0,0,0.8)] hover:bg-green-200 transition-colors duration-200"><p className="text-xs text-gray-700 font-bold">Protein</p><p className="text-lg font-bold text-green-600">{totalProtein}g</p></div>
          <div className="bg-sky-100 p-2 rounded-md border-2 border-gray-800 shadow-[2px_2px_0px_0px_rgba(0,0,0,0.8)] hover:bg-sky-200 transition-colors duration-200"><p className="text-xs text-gray-700 font-bold">Carbs</p><p className="text-lg font-bold text-sky-600">{totalCarbs}g</p></div>
          <div className="bg-amber-100 p-2 rounded-md border-2 border-gray-800 shadow-[2px_2px_0px_0px_rgba(0,0,0,0.8)] hover:bg-amber-200 transition-colors duration-200"><p className="text-xs text-gray-700 font-bold">Fat</p><p className="text-lg font-bold text-amber-600">{totalFat}g</p></div>
        </div>


        <h4 className="font-bold text-sm mb-2 mt-6 font-pixel">Today's Meals</h4>
        <div className="space-y-2 border-2 border-gray-800 p-2 rounded-md bg-white max-h-60 overflow-y-auto"> {/* Added max-h and overflow */}
          {meals.length > 0 ? meals.map((meal: MealWithCategory, index) => ( // Type meal here
            <div
              key={meal.id || index} // Use meal.id if available
              className="flex justify-between items-center p-2 bg-gray-50 rounded-md border-2 border-gray-800 hover:bg-green-50 transition-colors duration-200 hover:scale-[1.01]"
            >
              <div>
                <p className="font-bold text-sm">{meal.name}</p>
                <p className="text-xs text-gray-700">{meal.time} 
                  {meal.category && <span className={`ml-2 text-xs font-semibold px-1.5 py-0.5 rounded-full ${FOOD_BYTE_CATEGORIES.find(c=>c.id===meal.category)?.bgColor?.replace('100','200')} ${FOOD_BYTE_CATEGORIES.find(c=>c.id===meal.category)?.color}`}>{FOOD_BYTE_CATEGORIES.find(c=>c.id===meal.category)?.name}</span>}
                </p>
              </div>
              <p className="text-sm font-bold">{meal.calories} cal</p>
            </div>
          )) : (
            <p className="text-center text-sm text-gray-500 py-4">No meals logged yet for today.</p>
          )}
        </div>
      </RetroWindow>

      {/* GAMIFICATION SECTIONS */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
        <FoodBytesCollector collectedCategories={collectedFoodCategories} />
        <PixelFoodPyramid portions={foodPyramidPortions} />
      </div>


      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="sm:max-w-md border-2 border-gray-800 shadow-[4px_4px_0px_0px_rgba(0,0,0,0.8)]">
          <DialogHeader><DialogTitle className="font-bold font-pixel">Log a New Meal</DialogTitle><DialogDescription>Track your intake and food groups.</DialogDescription></DialogHeader>
          <form onSubmit={handleSubmit}>
            <div className="grid gap-4 py-4">
              {/* ... (name, time, calories, protein, carbs, fat inputs - NO CHANGE) ... */}
              <div className="grid grid-cols-4 items-center gap-4"><Label htmlFor="name" className="text-right font-bold">Name</Label><Input id="name" name="name" value={newMeal.name} onChange={handleInputChange} className="col-span-3 border-2 border-gray-800" required/></div>
              <div className="grid grid-cols-4 items-center gap-4"><Label htmlFor="time" className="text-right font-bold">Time</Label><Input id="time" name="time" value={newMeal.time} onChange={handleInputChange} placeholder="e.g. 8:30 AM" className="col-span-3 border-2 border-gray-800" required/></div>
              <div className="grid grid-cols-4 items-center gap-4"><Label htmlFor="calories" className="text-right font-bold">Calories</Label><Input id="calories" name="calories" type="number" value={newMeal.calories || ""} onChange={handleInputChange} className="col-span-3 border-2 border-gray-800" required min="1"/></div>
              <div className="grid grid-cols-4 items-center gap-4"><Label htmlFor="protein" className="text-right font-bold">Protein (g)</Label><Input id="protein" name="protein" type="number" value={newMeal.protein || ""} onChange={handleInputChange} className="col-span-3 border-2 border-gray-800" min="0"/></div>
              <div className="grid grid-cols-4 items-center gap-4"><Label htmlFor="carbs" className="text-right font-bold">Carbs (g)</Label><Input id="carbs" name="carbs" type="number" value={newMeal.carbs || ""} onChange={handleInputChange} className="col-span-3 border-2 border-gray-800" min="0"/></div>
              <div className="grid grid-cols-4 items-center gap-4"><Label htmlFor="fat" className="text-right font-bold">Fat (g)</Label><Input id="fat" name="fat" type="number" value={newMeal.fat || ""} onChange={handleInputChange} className="col-span-3 border-2 border-gray-800" min="0"/></div>

              {/* Category Select */}
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="category" className="text-right font-bold">
                  Category
                </Label>
                <Select name="category" value={newMeal.category} onValueChange={handleCategoryChange}>
                  <SelectTrigger className="col-span-3 border-2 border-gray-800">
                    <SelectValue placeholder="Select food group" />
                  </SelectTrigger>
                  <SelectContent className="border-2 border-gray-800 bg-white shadow-[2px_2px_0px_0px_rgba(0,0,0,0.8)]">
                    {FOOD_BYTE_CATEGORIES.map(cat => (
                      <SelectItem key={cat.id} value={cat.id} className="font-pixel hover:bg-green-100">
                        {cat.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
            <DialogFooter>
                <DialogClose asChild><Button type="button" variant="outline" className="border-2 border-gray-800 shadow-[2px_2px_0px_0px_rgba(0,0,0,0.8)]">Cancel</Button></DialogClose>
                <Button type="submit" className="text-black bg-green-400 hover:bg-green-500 active:bg-green-600 border-2 border-gray-800 shadow-[2px_2px_0px_0px_rgba(0,0,0,0.8)] active:shadow-none active:translate-y-[2px] active:translate-x-[2px]">Add Meal</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </>
  )
}